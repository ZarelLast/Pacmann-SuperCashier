# -*- coding: utf-8 -*-
"""Modul_Only_Projek_I.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QFH0ZoTwSdBnP5LfNezUUsveUvJa54My
"""

from tabulate import tabulate

class Transaction():
  keranjang = [
      {
        'id': 1,
        'nama':'tempe',
        'jumlah': 6,
        'harga': 10_000,
        'total': 1
      },{
        'id': 2,
        'nama':'tempe',
        'jumlah': 1,
        'harga': 15_000,
        'total': 3
      },{
        'id': 3,
        'nama':'tahu',
        'jumlah': 6,
        'harga': 10_000,
        'total': 4
      }
    ]

  # keranjang = []

  """ penggunaan id_item bukan nama_item dijelaskan di komen """
  def __init__(self):
    '''
      inisiasi kelas
    '''
    pass

  def add_items(self, data):
    '''
      Menambahkan item ke keranjang

      Parameter :
      -----------
      data : list/dict
        Data item berisikan nama, jumlah dan harga barang

    '''
    if len(self.keranjang) == 0:
      id_barang = len(self.keranjang) + 1
    else:
      for barang in self.keranjang:
        id_barang = barang['id'] + 1

    try:
      self.keranjang.append({
        "id": id_barang,
        "nama" : data[0],
        "jumlah" : data[1],
        "harga" : data[2],
        "total" : data[1]*data[2]
      })

    except:
      self.keranjang.append({
        "id": id_barang,
        "nama" : data[0],
        "jumlah" : data[1],
        "harga" : data[2],
        "total" : 0
      })

    self.check_order()

  def update_item_name(self, id_item, update_nama):
    '''
      Memperbaiki dan mengupdate nama item

      Parameter :
      ----------
      id_item : int
        ID item berdasarkan urutan pemesanan
      update_nama : str
        Nama item baru yang akan diberikan

    '''
    for barang in self.keranjang:
      if barang['id'] == id_item:
        barang.update({
            'id': barang['id'],
            'nama': update_nama,
            'jumlah': barang['jumlah'],
            'harga': barang['harga'],
            'total': barang['jumlah']*barang['harga']
          })

    self.check_order()

  def update_item_qty(self, id_item, update_jumlah):
    '''
      Memperbaiki dan mengupdate jumlah item

      Parameter :
      ----------
      id_item : int
        ID item berdasarkan urutan pemesanan
      update_jumlah : str
        Jumlah item baru yang akan diberikan

    '''
    for barang in self.keranjang:
      if barang['id'] == id_item:
        barang.update({
            'id': barang['id'],
            'nama': barang['nama'],
            'jumlah': update_jumlah,
            'harga': barang['harga'],
            'total': update_jumlah*barang['harga']
          })

    self.check_order()

  def update_item_price(self, id_item, update_harga):
    '''
      Memperbaiki dan mengupdate harga item

      Parameter :
      ----------
      id_item : int
        ID item berdasarkan urutan pemesanan
      update_harga : str
        Harga item baru yang akan diberikan

    '''
    for barang in self.keranjang:
      if barang['id'] == id_item:
        barang.update({
            'id': barang['id'],
            'nama': barang['nama'],
            'jumlah': barang['jumlah'],
            'harga': update_harga,
            'total': barang['jumlah']*update_harga
          })

    self.check_order()

  def delete_item(self, id_item):
    '''
      Menghapus salah satu item dari keranjang

      Parameter :
      ----------
      id_item : int
        ID item yang akan dihapus

    '''
    for index, barang in enumerate(self.keranjang):
      if barang['id'] == id_item:
        self.keranjang.pop(index)

    self.check_order()

  def reset_transaction(self):
    '''
      Menghapus seluruh item dari keranjang

    '''
    self.keranjang = []
    print("keranjang telah dikosongkan")

  def check_order(self):
    '''
      Mengecek item dan kesalahan yang terdapat dalam keranjang

    '''
    header = ["No.", "Nama Barang", "Jumlah Barang", "Harga Satuan", "Jumlah Harga"]
    table = []
    for barang in self.keranjang:
      table.append([
          barang["id"],
          barang["nama"],
          barang["jumlah"],
          barang["harga"],
          barang["total"]
        ])
    print(tabulate(table, headers = header, tablefmt = "github"))

    try:
      for barang in self.keranjang:
        if len(barang["nama"]) == 0:
          raise ValueError(f"Barang ID - {barang['id']}: Nama tidak sesuai")
        if type(barang["jumlah"]) != int:
          raise ValueError(f"Barang ID - {barang['id']}: Jumlah Barang bukan angka")
        if type(barang["harga"]) != int:
          raise ValueError(f"Barang ID - {barang['id']}: Harga bukan angka")

    except ValueError as e:
      print(e)

    self.total_price()

  def total_price(self):
    '''
      Menampilkan harga keseluruhan item dalam keranjang
      beserta diskon dan harga setelah diskon

    '''
    try:
      total_harga = 0
      for barang in self.keranjang:
        total_harga += barang["total"]
      if total_harga > 500_000:
        total_harga = total_harga - (total_harga * 0.1)
        print("Selamat! Anda mendapatkan diskon sebesar 10%")
      elif total_harga > 300_000:
        total_harga = total_harga - (total_harga * 0.08)
        print("Selamat! Anda mendapatkan diskon sebesar 8%")
      elif total_harga > 200_000:
        total_harga = total_harga - (total_harga * 0.05)
        print("Selamat! Anda mendapatkan diskon sebesar 5%")
      print(f"\nTotal harga yang harus dibayar adalah Rp.{total_harga:,.0f}")

    except TypeError:
      print(TypeError('PESANAN TIDAK SESUAI, Silahkan di cek kembali'))